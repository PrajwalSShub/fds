#include <iostream>
#include <queue>
#include <string>

using namespace std;

// Function to add a job to the queue
void addJob(queue<string>& jobQueue, const string& job) {
    jobQueue.push(job);
    cout << "Job '" << job << "' added to the queue." << endl;
}

// Function to delete (process) a job from the queue
void deleteJob(queue<string>& jobQueue) {
    if (!jobQueue.empty()) {
        cout << "Job '" << jobQueue.front() << "' processed and removed from the queue." << endl;
        jobQueue.pop(); // Remove the job from the queue
    } else {
        cout << "No jobs in the queue to process." << endl;
    }
}

// Function to display jobs in the queue
void displayJobs(const queue<string>& jobQueue) {
    if (jobQueue.empty()) {
        cout << "The job queue is empty." << endl;
        return;
    }

    cout << "Jobs in the queue: " << endl;
    queue<string> tempQueue = jobQueue;  // Copy the queue to avoid modifying the original queue
    while (!tempQueue.empty()) {
        cout << "- " << tempQueue.front() << endl;
        tempQueue.pop();
    }
}

int main() {
    queue<string> jobQueue; // Create a queue to hold jobs
    int choice;
    string job;

    while (true) {
        // Menu for user input
        cout << "\nJob Queue Menu:" << endl;
        cout << "1. Add job to queue" << endl;
        cout << "2. Delete job from queue (process)" << endl;
        cout << "3. Display current jobs in queue" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter job name to add to the queue: ";
                cin.ignore();  // Ignore the newline character left by previous input
                getline(cin, job);  // Read the full job name
                addJob(jobQueue, job);
                break;

            case 2:
                deleteJob(jobQueue);
                break;

            case 3:
                displayJobs(jobQueue);
                break;

            case 4:
                cout << "Exiting program." << endl;
                return 0;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
