#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to check if the expression is well-parenthesized
bool isWellParenthesized(string expression) {
    stack<char> s;

    // Traverse each character in the expression
    for (char ch : expression) {
        // If it's an opening delimiter, push it to the stack
        if (ch == '(' || ch == '{' || ch == '[') {
            s.push(ch);
        }
        // If it's a closing delimiter, check for matching opening delimiter
        else if (ch == ')' || ch == '}' || ch == ']') {
            // If the stack is empty or top of the stack doesn't match, return false
            if (s.empty()) {
                return false;
            }

            char top = s.top();
            s.pop();

            // Check if the top element matches the corresponding opening delimiter
            if ((ch == ')' && top != '(') || 
                (ch == '}' && top != '{') || 
                (ch == ']' && top != '[')) {
                return false;
            }
        }
    }

    // If the stack is empty, all opening delimiters have been matched
    return s.empty();
}

int main() {
    string expression;

    // Input expression
    cout << "Enter the expression to check: ";
    cin >> expression;

    // Check if the expression is well-parenthesized
    if (isWellParenthesized(expression)) {
        cout << "The expression is well-parenthesized!" << endl;
    } else {
        cout << "The expression is NOT well-parenthesized!" << endl;
    }

    return 0;
}
